---
title: "Sentiments and Topics in South African SONA Speeches"
title-size: small
format: html
execute: 
  echo: false
  cache: true
  freeze: auto
  output: false
  eval: false
---

<div style="text-align: justify"> 

<h4> Abstract </h4>
<hr> 

<h4> Introduction </h4>
<hr>
The field of Natural Language Processing (NLP) is faceted by techniques tailored for theme tracking and opinion mining which merge part of text analysis. Though, of particular prominence, is the extraction of latent thematic patterns and the establishment of the extent of emotionality expressed in political-based texts. 

Given such political context, it is of specific interest to analyse the  annual State of the Nation Address (SONA) speeches delivered by six different South African presidents (F.W. de Klerk, N.R. Mandela, T.M. Mbeki, K.P. Motlanthe, J.G. Zuma, and M.C. Ramaphosa) ranging over twenty-nine years (from 1994 to 2023). This analysis, descriptive and data-driven in nature, endeavours to examine the content of the SONA speeches in terms of themes via topic modelling (TM) and emotions via sentiment analysis (SentA). Applying a double-bifurcated approach, SentA will be executed within a macro and micro context both at the text (all-presidents versus by-president SONA speeches, respectively) and token (sentences versus words, respectively) level, as shown in @fig-SentA_MacroMicroScheme. This underlying framework is also assumed for TM, with the exceptions of only employing it within a macro-context at text level and a micro-context at the token level, as seen in @fig-TM_MacroMicroScheme.

![Illustration of how sentA will be implemented within a different-scales-within-different-levels framework for the presidential-SONA-speeech text analysis.](SentA_MacroMicroScheme.png){width=400 height=250 #fig-SentA_MacroMicroScheme}

![Depiction of how TM will be done using a similar approach to sentA, though tokens will only be defined in terms of words (and not also as sentences) at a text level of all SONA speeches (so disregarding the micro-president context).](TM_MacroMicroScheme.png){height=150 #fig-TM_MacroMicroScheme}

Through such a multi-layered lens, the identification of any trends, both in terms of topics and sentiments, over time at both a large (presidents as a collective) as well as at a small (each president as an individual) scale is attainable. This explicates not only an aggregated perspective of the general political discourse prevailing within South Africa (SA), but also a more niche outlook of the specific rhetoric employed by each of the country's serving presidents during different date periods. 

To achieve all of the above-mentioned, it is first relevant to revise foundational terms and review related literature in context of politics and NLP. All pertinent pre-processing of the political text data is then considered, followed by a discussion delving into the details of each SentA and TM approach applied. Specifically, two different lexicons are leveraged to describe sentiments, whilst five different topic models are tackled to uncover themes within South-African-presidents’ SONA speeches. Ensuing the implementation of these methodologies, the results thereof are detailed in terms insights and interpretations. Thereafter, an overall evaluation of the techniques in terms of efficacy and inadequacy is overviewed. Finally, focal findings are highlighted and potential improvements as part of future research are recommended.  


<h4> Literature Review </h4>
<hr>
<b><u> SONA  </b></u>

SONA, a pivotal event in the political programme of Parliament, serves as a presidential summary for the South African public. Specifically, the country’s current domestic affairs and international relations are reflected upon, past governmental work is perused, and future plans in terms of policies and civil projects are proposed. Through this address, accountability on the part of government is re-instilled and transparency with the public is re-affirmed on an annual basis, either once (non-election year) or twice (pre-and-post election) [@Muthambi2017].
The text analysis of such SONA speeches, via the implementation of TM and SentA, has been previously done for Philippine presidents [@MirandaBringula2021]. Though, it is now of interest to extend such an application to another country, SA. 


<b><u> Topic modelling (TM) </b></u>

TM, an unsupervised learning approach, implicates the identification of underlying abstract themes in some body of text, in the absence of pre-specified labels [@Cho2019]. In general, there are two topic-model assumptions: each document comprises of a mixture of topics and each topic consists of a collection of words [@Zhang2018]. Different types of topic models exist, each with varying complexity in terms of the way in which topics are generated. The simplest one, Latent Semantic Analysis (LSA), has previously been implemented to discover patterns of lexical cohesion in political speech, specifically that of the former Prime Minister of the United Kingdom, Margaret Thatcher [@Klebanov2008]. Improving on LSA methodology, Probabilistic LSA (pLSA) has been implemented in healthcare [@Zhu2014] and educational [@Ming2014] contexts, albeit no application thereof in political science was found. A further sophisticated model, Latent Dirichlet Allocation (LDA), has been used to determine trending topics in  news on governmental YouTube channels [@Subhan2023]. 

<b><u> Sentiment analysis (SentA) </b></u>

SentA involves deciphering the intent of words to infer certain emotional dimensions labelled either in polarized (negative/positive) or higher-dimensional terms (niche feelings like joy/sadness). Various unigram lexicons have been derived to such extents. For example, the R-based $\texttt{nrc}$ lexicon dichotomously classifies words with yes/no labels in categories such as positive, negative, anticipation, anger, and so forth. In contrast, the Python-based $\texttt{TextBlob}$ lexicon processes textual data in the form of a tuple where a polarity score (ranges between -1 and +1 which relates to negative and positive sentiment, respectively) and a subjectivity score (ranges between 0 and 1 which refers to being very objective or very subjective, respectively) is produced. Using such pre-defined lexicons has been previously utilized to analyze political communication, specifically in terms of campaign polarization, via SentA [@Haselmayer2017]. 


<h4> Data </h4>
<hr>

<b><u> Tokenization </b></u>

The process of tokenization entails breaking up given text into units, referred to as tokens (or terms), which are meaningful for analysis [@Zhang2018]. In this case, these tokens take on different structures, based on either a macro-context (i.e., sentences) or micro-context (i.e., words). At both scales, the way in which these tokens are valued will be varied. The value will either be defined by a bag-of-words (BoW) or term-frequency, inverse-document-frequency (tf-idf) approach. The former way implicates accounting for the number of occurrences of some token in some document. On the other hand, the latter way not only regards the frequency of some token, but also the significance thereof. Thus, tf-idf involves the assignment of some weight to each token in a document which in turn reflects its importance relative to the entire collection of documents (corpus). It then follows that the tf-idf value of a token *t* in a document *d* within a corpus *D* is calculated as the product of two constituents. The first being tf(*t*,*d*) defined as the quotient of the frequency of token *t* in document *d* and the total number of tokens in document *d*, whereas the second is idf(*t*, *D*) denoted by the quotient of the natural logarithm of the total number of documents in corpus *D* and the number of documents containing the token *t* [@SilgeRobinson2017]. 


<b><u> Number of topics </b></u>

In order to determine the optimal number of topics, a coherence score is calculated.  This metric measures the ability of a topic model to distinguish well between topics that are semantically interpretable by humans and are not simply statistical-inference artifacts. Hence, the number of topics as well as any other topic-model hyperparameters (like $\alpha$ and $\beta$ for LDA) are tuned to values that yield the maximum coherence score, allowing for the most understandable themes. 

<!-- Two approaches can be applied to determine the optimum topic number. Within the first approach, each topic can be viewed as a cluster and a metric showing how similar each word is to its own topic (cohesion) compared to other topics (separation) can be computed. The Silhouette Coefficient is such a measure ranging from a value of negative one to positive one. Here, higher positive values are indicative of words being well-compacted within the topic to which it belongs. The second approach involves the calculation of a coherence score. This measures the ability of the topic model to distinguish well between topics that are semantically interpretable by humans and are not simply statistical-inference artifacts. Hence, the number of topics as well as any other topic-model hyperparameters are tuned to values that yield the maximum coherence score, allowing for the most understandable themes. This latter approach will largely be applied in this SONA-speech analysis.  -->

<h4> Methods </h4>
<hr>
<h5> Topic modelling </h5>

<b><u> Latent Semantic Analysis (LSA) </b></u> 

![Schematic representation of LSA outlining the factorization of the *DTM* matrix.](LSA.png){#fig-LSA}

LSA [@Deerwester1990] is a non-probabilistic, non-generative model where a form of matrix factorization is utilized to uncover few latent topics, capturing meaningful relationships among documents/tokens. As depicted in @fig-LSA, in the first step, a document-term matrix *DTM* is generated from the raw text data by tokenizing *d* documents into *w* words (or sentences), forming the columns and rows respectively. Each row-column entry is either valued via the BoW or tf-idf approach. This *DTM*-matrix, which is often sparse and high-dimensional, is then decomposed via a dimensionality-reduction-technique, namely truncated Singular Value Decomposition (SVD). Consequently, in the second step the *DTM*-matrix becomes the product of three matrices: the topic-word matrix $A_{t*}$ (for the tokens), the topic-prevalence matrix $B_{t*}$ (for the latent semantic factors), and the transposed document-topic matrix $C^{T}_{t*}$ (for the document). Here, *t\**, the optimal number of topics, is a hyperparameter which is refined at a value (via the coherence-measure approach) that retains the most significant dimensions in the transformed space. In the final step, the text data is then encoded using this top-topic number. 

Given LSA only implicates a *DTM*-matrix, the implementation thereof is generally efficient. Though, with the involvement of truncated SVD, some computational intensity and a lack of quick updates with new, incoming text-data can arise. Additional LSA drawbacks include: the lack of interpretability, the underlying linear-model framework (which results in poor performance on text-data with non-linear dependencies), and the underlying Gaussian assumption for tokens in documents (which may not be an appropriate distribution). 

<b><u> Probabilistic Latent Semantic Analysis (pLSA) </b></u>

![Schematic representation of pLSA, where the different-shade-of-blue colours highlight similarities shared with LSA-related matrices shown in Figure 3.](pLSA.png){#fig-pLSA height=250}

Instead of implementing truncated SVD, pLSA [@Hofmann1999] rather utilizes a generative, probabilistic model. Within this framework, a document *d* is first selected with probability P(d). Then given this, a latent topic *t* is present in this selected document *d* and so chosen with probability of P(t|d). Finally, given this chosen topic *t*, a word *w* (or sentence) is generated from it with probability P(w|t), as shown in @fig-pLSA. It is noted that the values of P(d) is determined directly from the corpus *D* which is defined in terms of a *DTM* matrix. In contrast, the probabilities P(t|d) and P(w|t) are parameters modelled as multinomial distributions and iteratively updated via the Expectation-Maximization (EM) algorithm. Direct parallelism between LSA and pLSA can be drawn via the methods’ parameterization, as conveyed via matching colours of the topic-word matrix and P(w|t), the document-topic matrix and P(d|t) as well as the topic-prevalence matrix and P(t) displayed in @fig-LSA and @fig-pLSA, respectively. 

Despite pLSA implicitly addressing LSA-related disadvantages, this method still involves two main drawbacks. There is no probability model for the document-topic probabilities P(t|d), resulting in the inability to assign topic mixtures to new, unseen documents not trained on. Model parameters also then increase linearly with the number of documents added, making this method more susceptible to overfitting. 

<b><u>  Latent Dirichlet Allocation </b></u>

![Schematic representation of LDA where the dark-blue-shaded block represents observed words.](LDA.png){height=370 #fig-LDA}

LDA is another generative, probabilistic model which can be deemed as a hierarchical Bayesian version of pLSA. Via explicitly defining a generative model for the document-topic probabilities, both the above-mentioned pitfalls of pLSA are improved upon. The number of parameters to estimate drastically decrease and the ability to apply and generalize to new, unseen documents is attainable. As presented in @fig-LDA, the initial steps first involve randomly sampling a document-topic probability distribution $\theta$ from a Dirichlet (Dir) distribution $\eta$, followed by randomly sampling a topic-word probability distribution $\phi$ from another Dirichlet distribution $\tau$. From the $\theta$ distribution, a topic *t* is selected by drawing from a multinomial (Mult) distribution (third step) and from the $\phi$ distribution given said topic *t*, a word *w* (or sentences) is sampled from another multinomial distribution (fourth step). The associated LDA-parameters are then estimated via a variational expectation maximization algorithm or collapsed Gibbs sampling. 


<b><u>  Correlated Topic Model (CTM) </b></u>

![Schematic representation of CTM where the dark-blue-shaded block represents observed words, whilst the light-grey colour outlines the distinctions from the LDA topic model presented in Figure 5.](CTM.png){height=300 #fig-CTM}

Following closely to LDA, the CTM [@LaffertyBlei2005] additionally allows for the ability to model the presence of any correlated topics.  Such topic correlations are introduced via the inclusion of the multivariate normal (MultNorm) distribution with *t* length-vector of means $\mu$ and *t* $\times$ *t* covariance matrix $\Sigma$ where the resulting values are then mapped into probabilities by passing through a logistic (log) transformation. Comparing @fig-LDA and @fig-CTM, the nuance between LDA and CTM is highlighted using a light-grey colour, where the discrepancy in the models come about from replacing the Dirichlet distribution (which involves the implicit assumption of independence across topics) with the logit-normal distribution (which now explicitly enables for topic dependency via a covariance structure) for generating document-topic probabilities. The other generative processes previously outlined for LDA is retained and repeated for CTM. Given this additional model complexity, the more convoluted mean-field variational inference algorithm is employed for CTM-parameter estimation which necessitates many iterations for optimization purposes. CTM is consequently computationally more expensive than LDA. Though, this snag is far outweighed by the procurement of richer topics with overt relationships acknowledged between these. 


<b><u>  Author Topic Model (ATM) </b></u>

![Schematic representation of ATM where the dark-blue-shaded blocks represents observed words and authors, whilst the light-grey colour highlights the differences compared to the LDA topic model presented in Figure 5.](ATM.png){#fig-ATM height=450}

ATM [@RosenZvi2012] extends LDA via the inclusion of authorship information with topics. Again, inspecting @fig-LDA and @fig-ATM, the slight discrepancies between these two models are accentuated with the light-grey colour. Here, for each word *w* in the document *d* an author *a* is sampled uniformly (Uni) at random. Each author is associated with a distribution over topics ($\Psi$) sampled from a Dirichlet prior $\alpha$. The resultant mixture weights corresponding to the chosen author are used to select a topic *t*, then a word *w* (or sentence) is generated according to the topic-word distribution $\phi$ (drawn from another Dirichlet prior $\beta$) corresponding to that said chosen topic *t*. Therefore, through the estimation of the $\psi$ and $\phi$ parameters, not only is information obtained about which topics authors generally relate to, but also a representation of these document contents in terms of these topics, respectively. 

<h5> Sentiment analysis </h5>

<b><u>  AFINN </b></u>

The R-based $\texttt{AFINN}$ lexicon scores words across a range spanning from the value of -5 to +5. Intuitively, words scored closer to the lower-boundary value relate to more negative sentiment, and in contrast higher positive sentiment is revealed if rather closer to the upper-boundary value [@SilgeRobinson2017]. 

<b><u>  Bing </b></u>

Unlike $\texttt{AFINN}$ , the R-based $\texttt{bing}$ lexicon does not provide sentiments via some scoring system. Instead, it simply assigns a binary label of a word being interpreted as either positive or negative [@SilgeRobinson2017].  


```{python}
#| eval: true

# Run 1

# Loading in the necessary libraries
import zipfile
import os
import pandas as pd
import re
import matplotlib.pyplot as plt
from wordcloud import WordCloud, STOPWORDS
from itertools import cycle
import seaborn as sns
import numpy as np
from collections import Counter
import nltk
from nltk.tokenize import word_tokenize
from nltk.corpus import wordnet, stopwords, words
from nltk.stem import WordNetLemmatizer
from ast import literal_eval
from collections import defaultdict
import pyLDAvis.gensim_models
import gensim
from gensim.models import LsiModel, TfidfModel
from gensim.models.coherencemodel import CoherenceModel
from gensim import corpora
from gensim.utils import simple_preprocess
from plsa import Corpus, Pipeline, Visualize
from plsa.pipeline import DEFAULT_PIPELINE
from plsa.algorithms import PLSA
from gensim.models import AuthorTopicModel
from gensim.models import LdaModel
import tqdm
import tomotopy as tp

# Global params
plt.rcParams['xtick.labelsize'] = 18
plt.rcParams['ytick.labelsize'] = 18

# Set the global label sizes for the plots
plt.rcParams['axes.labelsize'] = 20

# Set the global legend size
plt.rcParams['legend.fontsize'] = 18

```


```{python}
#| eval: false

# Unzip the file and get the list of filenames
with zipfile.ZipFile("data/speeches.zip", 'r') as zip_ref:
    zip_ref.extractall("data")

filenames = os.listdir("data")
filenames = [filename for filename in filenames if filename.endswith('.txt')]

# Read the content of each speech file and extract the date from the first line
speeches = []
dates = []
for filename in filenames:
    with open(os.path.join("data", filename), 'r', encoding='utf-8') as file:
        # Extract date from the first line
        date = file.readline().strip()
        dates.append(date)
        
        # Read the rest of the file
        speeches.append(file.read())

# Create DataFrame
sona = pd.DataFrame({'filename': filenames, 'speech': speeches, 'date': dates})

# Extract year and president for each speech
sona['year'] = sona['filename'].str[:4]
sona['president'] = sona['filename'].str.split('_').str[-1].str.split('.').str[0]

# Clean the sona dataset by removing unnecessary text
replace_reg = r'(http.*?(\s|.$))|(www.*?(\s|.$))|&amp;|&lt;|&gt;|\n'
sona['speech'] = sona['speech'].str.replace(replace_reg, ' ')

# Split speeches into sentences
sona_sentences = sona.copy()

import itertools

# Replace new lines with space and split into sentences based on regular expression
sona_sentences['speech'] = sona_sentences['speech'].str.replace('\n', ' ').str.split(r'(?<!\w\.\w.)(?<![A-Z][a-z]\.)(?<=\.|\?)\s')

# Flatten the list of sentence fragments to avoid nested lists
sona_sentences['speech'] = sona_sentences['speech'].apply(lambda sentences: list(itertools.chain.from_iterable(sentence.split('.') for sentence in sentences)))

# Remove empty strings from the list of sentences
sona_sentences['speech'] = sona_sentences['speech'].apply(lambda sentences: [sentence.strip() for sentence in sentences if sentence.strip()])

# Make a csv of the speeches
sona.to_csv('data/sona_speeches.csv', index=False)

# Make a csv of the sentences
sona_sentences.to_csv('data/sona_sentences_untransformed.csv', index=False)

```


```{python}
#| eval: false

# Make sure to download the necessary NLTK corpus if you haven't already
#nltk.download('wordnet')
#nltk.download('averaged_perceptron_tagger')
#nltk.download('words')

# Read in the sona speeches dataset
sona_speeches_df = pd.read_csv('data/sona_speeches.csv')
sona_sentences_clean = pd.read_csv('data/sona_sentences_untransformed.csv')
sona_sentences_clean['speech'] = sona_sentences_clean['speech'].apply(literal_eval)

# Initialize the WordNetLemmatizer
lemmatizer = WordNetLemmatizer()
stop_words = set(stopwords.words('english'))
english_words = set(words.words())
additional_words = {
    'honourable', 'member', 'chairperson',
    'south', 'africa', 'african', 'africans', 'year',
    'madame', 'madam', 'soes', 'ms', 'madams', 'madames', 'mw',
    'compatriotsthe',
    'also'
}

# Function to convert NLTK's part-of-speech tags to WordNet's part-of-speech tags
def get_wordnet_pos(word):
    """Map NLTK part of speech tags to WordNet part of speech tags."""
    tag = nltk.pos_tag([word])[0][1][0].upper()
    tag_dict = {"J": nltk.corpus.wordnet.ADJ,
                "N": nltk.corpus.wordnet.NOUN,
                "V": nltk.corpus.wordnet.VERB,
                "R": nltk.corpus.wordnet.ADV}

    return tag_dict.get(tag, nltk.corpus.wordnet.NOUN)

# Clean the text, convert to lowercase, and lemmatize each word
def clean_text(text):
    # Remove special characters: keep only letters, numbers, and basic punctuation
    text = re.sub(r'[.;]', ' ', text)  # Replaces periods with spaces
    text = re.sub(r'[^a-zA-Z ]', '', text)
    text = text.lower()  # Convert to lowercase
    
    # Tokenize the text
    words = word_tokenize(text)
    
    # Remove stop words
    words = [word for word in words if word not in stop_words]
    
    # Remove additional words
    words = [word for word in words if word not in additional_words]

    # Lemmatize each word with the correct POS tag
    lemmatized_words = []
    for word, tag in nltk.pos_tag(words):
        wntag = get_wordnet_pos(tag)
        lemmatized_word = lemmatizer.lemmatize(word, wntag)
        # Only append the lemmatized word if it is in the set of English words
        if lemmatized_word in english_words:
            lemmatized_words.append(lemmatized_word)
    
    # Join the lemmatized words back into one string
    text = ' '.join(words)
    return text

def clean_text_no_word_removals(text):
    # Remove special characters: keep only letters, numbers, and basic punctuation
    text = re.sub(r'[.;]', ' ', text)  # Replaces periods with spaces
    text = re.sub(r'[^a-zA-Z ]', '', text)
    text = text.lower()  # Convert to lowercase
    return text

# Apply the cleaning function to the speech column
tempdf = sona_speeches_df.copy()
sona_speeches_df['speech'] = tempdf['speech'].apply(clean_text)
sona_speeches_df['speech_untrans'] = tempdf['speech'].apply(clean_text_no_word_removals)

def clean_speeches(speeches):
    # The input is expected to be a list of strings
    return [clean_text(sentence) for sentence in speeches]

# Apply the cleaning to the sentences too
sona_sentences_clean['sentence'] = sona_sentences_clean['speech'].apply(lambda speeches: [clean_text(sentence) for sentence in speeches])

# Apply the cleaning to sentences that need to keep their words
sona_sentences_clean['sent_untrans'] = sona_sentences_clean['speech'].apply(lambda speeches: [clean_text_no_word_removals(sentence) for sentence in speeches])

# Make a csv of the speeches
sona_speeches_df.to_csv('data/sona_speeches_adapted.csv', index=False)

# Remove the speech column from the sentences DataFrame
sona_sentences_clean.drop(columns=['speech'], inplace=True)

# Make a csv of the sentences
sona_sentences_clean.to_csv('data/sona_sentences_clean.csv', index=False)

```


```{python}
#| eval: true

# Run 2

sona_sentences_clean = pd.read_csv('data/sona_sentences_clean.csv')
sona_sentences_clean['sentence'] = sona_sentences_clean['sentence'].apply(literal_eval)
sona_sentences_clean['sent_untrans'] = sona_sentences_clean['sent_untrans'].apply(literal_eval)

# Make the sentences into a single column
sona_sentences_alltogether = sona_sentences_clean.explode('sentence')
sona_sentences_all_untrans = sona_sentences_clean.explode('sent_untrans')

# Drop the other columns
sona_sentences_alltogether.drop(columns=['sent_untrans'], inplace=True)
sona_sentences_all_untrans.drop(columns=['sentence'], inplace=True)

# Make a csv of the sentences
sona_sentences_all_untrans.to_csv('data/sona_sentiment_sentences.csv', index=False)

# Speeches
sona_speeches_clean = pd.read_csv('data/sona_speeches_adapted.csv')

```


```{python}

from sklearn.feature_extraction.text import CountVectorizer, TfidfVectorizer

max_features = 2000

bow_vectorizer = CountVectorizer(max_features=max_features)
tfidf_vectorizer = TfidfVectorizer(max_features=max_features)

# Transformed on the words
bow_matrix_words = bow_vectorizer.fit_transform(sona_speeches_clean['speech'])
tfidf_matrix_words = tfidf_vectorizer.fit_transform(sona_speeches_clean['speech'])


```


```{python}
from matplotlib.colors import LinearSegmentedColormap

cmap = plt.cm.cividis

norm = plt.Normalize(0, 100)

# Define a colour map based on cividis
# Define a new colormap using a smaller slice of the cividis colormap, this time stopping well before the yellows
cividis_modified = cmap(np.linspace(0, 0.4, cmap.N))  # Using only 40% of the colormap range

# Create a new colormap from the data
cividis_no_yellow_light = LinearSegmentedColormap.from_list('cividis_no_yellow_light', cividis_modified)

# Let's pick three colors from the modified colormap
colormap = [cividis_no_yellow_light(norm(0)), 
          cividis_no_yellow_light(norm(50)), 
          cividis_no_yellow_light(norm(100))]

```

<h4> Exploratory Data Analysis</h4>
<hr>

![Most frequent words used across all SONA speeches, irrespective of president.](saved_plots/overall_top_words.png){width=500 height=350 #fig-EDA-speeches}

From @fig-EDA-speeches, it is evident that the word "government" is mainly referenced to across all SONA speeches. This word dominance draws upon how the importance of this authority body, which is integral to the governance of SA, is emphasized. The frequent usage of the words "people" and "public" indicates a sense of inclusivity where the idea of togetherness is implicitly suggested. Other words, such as "development" and "new", are indicative of ideas of growth and renewal. Lastly, a sense of security and safety is provided with the recurring use of the word "ensure".

::: {#fig-EDA-presidents layout-ncol=2}

![de Klerk](saved_plots/deKlerk_top_words.png){#fig-deKlerk}

![Mandela](saved_plots/Mandela_top_words.png){#fig-Mandela}

![Mbeki](saved_plots/Mbeki_top_words.png){#fig-Mbeki}

![Motlanthe](saved_plots/ Motlanthe_top_words.png){#fig-Motlanthe}

![Zuma](saved_plots/Zuma_top_words.png){#fig-Zuma}

![Ramaphosa](saved_plots/Ramaphosa_top_words.png){#fig-Ramaphosa}

Most frequent words used in SONA speeches, faceted by president.
:::

After faceting the most frequent words by president, as displayed in @fig-EDA-presidents, there are some slight nuances noted. For instance, former president de Klerk used words which were emblematic of the political paradigm shift that occurred during the time of his term. Words such as “transitional”, “constitutional”, and “constitution” reflects the country’s progression from an exclusive, segregated to a more inclusive, democratic state. This political and legal reform directed towards achieving societal equality is further underscored by the words, “parties”, “party”, and “election”. The pivotal role of proper partnerships being formed, which would have further aided in maintaining this change, is foregrounded with the word “alliance”.  

Similarly, this idea of unity has also been foregrounded in the other five presidents’ speeches with the commonly shared word “people”. Though, unlike de Klerk, the other former presidents (Mandela, Mbeki, Motlanthe, Zuma) and current president (Ramaphosa), seem to similarly place more focus on the explicit communication of policies and vision (“development” and “work”) and the establishment of a sense of responsibility and accountability on their part as president (“government” and “ensure”). Some minor distinctions between these aforementioned presidents can be made. Mandela, Mbeki, and Motlanthe, for example, seemed to draw more attention to “society” or “social” progress, whilst Zuma and Ramaphosa appeared to place more prominence on “economic” progress.



```{python}

from sklearn.feature_extraction.text import ENGLISH_STOP_WORDS
from collections import Counter
import matplotlib.pyplot as plt

# Function to count words in speeches excluding stopwords
def get_word_frequencies(speeches, stopwords):
    word_counts = Counter()
    for speech in speeches:
        words = speech.lower().split()
        # Remove stopwords from the count
        words = [word.strip('.,!?"\'-()') for word in words if word.strip('.,!?"\'-()') not in stopwords]
        word_counts.update(words)
    return word_counts

# Get the word frequencies excluding stopwords
word_frequencies = get_word_frequencies(sona_speeches_clean['speech'], ENGLISH_STOP_WORDS)

# Get the top 10 most frequent words across all speeches
top_10_words = word_frequencies.most_common(10)

```

```{python}

# Plotting
plt.figure(figsize=(10, 6))
plt.bar([word for word, count in top_10_words], [count for word, count in top_10_words], color=colormap[2])
plt.xlabel('Words')
plt.ylabel('Frequency')
plt.xticks()
plt.yticks()
plt.xticks(rotation=45)

# Save the plot as a PNG file
plt.savefig(f'saved_plots/overall_top_words.png', bbox_inches='tight')
plt.close()  # Close the figure to avoid displaying it in the notebook

```

```{python}

# Function to get top N frequent words for each president
def get_top_words_by_president(speeches_df, n, stopwords):
    presidents = speeches_df['president'].unique()
    top_words_by_president = {}
    for president in presidents:
        president_speeches = speeches_df[speeches_df['president'] == president]['speech']
        word_frequencies = get_word_frequencies(president_speeches, stopwords)
        top_words_by_president[president] = word_frequencies.most_common(n)
    return top_words_by_president

# Get the top 10 most frequent words for each president
top_10_words_by_president = get_top_words_by_president(sona_speeches_clean, 10, ENGLISH_STOP_WORDS)

```

```{python}

# Plot the word frequencies for each president
for president, top_words in top_10_words_by_president.items():
    
    # Individual plot for each president
    plt.figure(figsize=(10, 6))
    plt.bar([word for word, count in top_words], [count for word, count in top_words], color=colormap[0])
    plt.xlabel('Words')
    plt.ylabel('Frequency')
    plt.xticks(rotation=45)

    # Save the plot as a PNG file
    plt.savefig(f'saved_plots/{president}_top_words.png', bbox_inches='tight')
    plt.close()  # Close the figure to avoid displaying it in the notebook

```


<h4> Results </h4>
<hr>

<h5> Sentiment Analysis </h5>


::: {#fig-sent-speeches layout-ncol=2}

![$\texttt{AFINN}$: All speeches](sentiment_plots/speech_afinn_all.png){#fig-sent-speeches-afinn}

![$\texttt{bing}$: All speeches](sentiment_plots/speech_bing_all.png){#fig-sent-speeches-bing}

Overall sentiment score for SONA speeches across time (segmented by presidential terms), compared for two different lexicons.
:::

Comparing @fig-sent-speeches-afinn and @fig-sent-speeches-bing, it is evident that there is no obvious, overt difference in the computed net sentiment scores, which are overall positive, across time and presidents for the two different lexicons. Any slight variation between $\texttt{AFINN}$ and $\texttt{bing}$ is most likely attributed to the lexicons’ varying scales (+5/-5 versus +1/-1, respectively). Hence, any sentiment derived from the former lexicon might be slightly more exaggerated in nature compared to the latter lexicon. This is noted when checking the $y$-axes range of the sentiment scores, which reach a maximum of 600 for the $\texttt{AFINN}$ lexicon and only 300 for the $\texttt{bing}$ lexicon.

Across both lexicons, from de Klerk to Mbeki’s presidential terms, positive sentiment seems to steadily rise. Though, after a peak of high, positive sentiment scores from Mbeki’s SONA speeches, there is a slight decline in this overall positivity. This is especially present throughout Zuma’s presidential term. 


::: {#fig-sent-presidents layout-ncol=2}

![$\texttt{AFINN}$: de Klerk speeches](sentiment_plots/sent_afinn_deKlerk.png){#fig-sent-deKlerk-afinn}

![$\texttt{bing}$: de Klerk speeches](sentiment_plots/sent_bing_deKlerk.png){#fig-sent-deKlerk-bing}

![$\texttt{AFINN}$: Mandela speeches](sentiment_plots/sent_afinn_Mandela.png){#fig-sent-Mandela-afinn}

![$\texttt{bing}$: Mandela speeches](sentiment_plots/sent_bing_Mandela.png){#fig-sent-Mandela-bing}

![$\texttt{AFINN}$: Mbeki speeches](sentiment_plots/sent_afinn_Mbeki.png){#fig-sent-Mbeki-afinn}

![$\texttt{bing}$: Mbeki speeches](sentiment_plots/sent_bing_Mbeki.png){#fig-sent-Mbeki-bing}

![$\texttt{AFINN}$: Motlanthe speeches](sentiment_plots/sent_afinn_ Motlanthe.png){#fig-sent-Motlanthe-afinn}

![$\texttt{bing}$: Motlanthe speeches](sentiment_plots/sent_bing_ Motlanthe.png){#fig-sent-Motlanthe-bing}

![$\texttt{AFINN}$: Zuma speeches](sentiment_plots/sent_afinn_Zuma.png){#fig-sent-Zuma-afinn}

![$\texttt{bing}$: Zuma speeches](sentiment_plots/sent_bing_Zuma.png){#fig-sent-Zuma-bing}

![$\texttt{AFINN}$: Ramaphosa speeches](sentiment_plots/sent_afinn_Ramaphosa.png){#fig-sent-Ramaphosa-afinn}

![$\texttt{bing}$: Ramaphosa speeches](sentiment_plots/sent_bing_Ramaphosa.png){#fig-sent-Ramaphosa-bing}

Trajectory of sentiment score through SONA-speech sentences stratified by president, comparing across two different lexicons. 
:::

From inspecting @fig-sent-presidents , it is apparent that the relative trajectory of underlying emotion is generally similar for each president. The dips and troughs in sentiment prevalent for both $\texttt{bing}$ and $\texttt{AFINN}$ lexicons occur at approximately the same sentences in the respective presidents’ speeches. Though, there is some stark contrast found between the two lexicons when comparing for Zuma’s speeches. For this president, the negative falls and positive rises are more exaggerated for the $\texttt{AFINN}$ compared to the $\texttt{bing}$ lexicon. Additionally, the sentiment pattern of Mbeki’s speeches again seems more skewed to the positive side, with more frequent extreme rises to high sentiment score values across sentences. It is also again seen that more negative sentiment is expressed in Zuma’s speeches, give the more dominant dips. For Ramaphosa, there appears to be more of a balance between positive-and-negative sentiment. There are no extreme, outlying rises/falls, rather a more consistent sawtooth-like pattern is prominent. 


::: {#fig-wordcontr-speeches layout-ncol=2}

![$\texttt{AFINN}$: All speeches](sentiment_plots/word_contr_AFINN_all.png){#fig-wordcontr-speeches-afinn}

![$\texttt{bing}$: All speeches](sentiment_plots/word_contr_bing_all.png){#fig-wordcontr-speeches-bing}

Words which contribute to the positive and negative sentiment across all SONA speeches. 
:::

Similarly with the general sentiment-score trajectories, there are more overlaps between the two lexicons when comparing the specific words which contribute to the positive and negative sentiments, as displayed in @fig-wordcontr-speeches. The same seven (out of the top ten) words commonly contribute to negative sentiment (“corruption”, “crime”, “violence”), in addition to positive sentiment (“improve”, “support”, “progress”) across both lexicons. Albeit, the extent of these aforementioned words’ contributions to the respective sentiments do slightly vary in amounts. Some unique, independent words also add to the negative sentiment for the $\texttt{AFINN}$ lexicon  (“problems”, “unemployment”) and $\texttt{bing}$ lexicon (“issues”). Likewise, there are distinctive words for this former  lexicon (“growth”, “ensure”, “great”) and latter lexicon (“well”) attributed to positive sentiment. 

::: {#fig-wordcontr-presidents layout-ncol=2}

![$\texttt{AFINN}$: de Klerk speeches](sentiment_plots/word_contr_AFINN_deKlerk.png){#fig-wordcontr-deKlerk-afinn}

![$\texttt{bing}$: de Klerk speeches](sentiment_plots/word_contr_bing_deKlerk.png){#fig-wordcontr-deKlerk-bing}

![$\texttt{AFINN}$: Mandela speeches](sentiment_plots/word_contr_AFINN_Mandela.png){#fig-wordcontr-Mandela-afinn}

![$\texttt{bing}$: Mandela speeches](sentiment_plots/word_contr_bing_Mandela.png){#fig-wordcontr-Mandela-bing}

![$\texttt{AFINN}$: Mbeki speeches](sentiment_plots/word_contr_AFINN_Mbeki.png){#fig-wordcontr-Mbeki-afinn}

![$\texttt{bing}$: Mbeki speeches](sentiment_plots/word_contr_bing_Mbeki.png){#fig-wordcontr-Mbeki-bing}

![$\texttt{AFINN}$: Motlanthe speeches](sentiment_plots/word_contr_AFINN_ Motlanthe.png){#fig-wordcontr-Motlanthe-afinn}

![$\texttt{bing}$: Motlanthe speeches](sentiment_plots/word_contr_bing_ Motlanthe.png){#fig-wordcontr-Motlanthe-bing}

![$\texttt{AFINN}$: Zuma speeches](sentiment_plots/word_contr_AFINN_Zuma.png){#fig-wordcontr-Zuma-afinn}

![$\texttt{bing}$: Zuma speeches](sentiment_plots/word_contr_bing_Zuma.png){#fig-wordcontr-Zuma-bing}

![$\texttt{AFINN}$: Ramaphosa speeches](sentiment_plots/word_contr_AFINN_Ramaphosa.png){#fig-wordcontr-Ramaphosa-afinn}

![$\texttt{bing}$: Ramaphosa speeches](sentiment_plots/word_contr_bing_Ramaphosa.png){#fig-wordcontr-Ramaphosa-bing}

Words which contribute to the positive and negative sentiment for each specific presidents' SONA speech/speeches. 
:::

After faceting @fig-wordcontr-speeches by president, as presented in the sub-plots of @fig-wordcontr-presidents, essentially no variability is indicated in terms of uniqueness and the contribution magnitude thereof. For both lexicons, the same set of words add the same amount to each sentiment. Furthermore,  commonalities between words contributing to the sentiments is evident between the five presidents after de Klerk. Negative-sentiment words like “unconstitutional”, “deprive”, “discrimination”, and “boycott” and positive-sentiment words such as “proud”, “succeeded”, and “peaceful” only features in de Klerk’s speech. All of these aforementioned words seem to directly relate to the change in political context during de Klerk’s term. Whilst, the words prevailing in the other five presidents’ speeches appear to foreground the continuation of this changed political climate with positive-sentiment words like “improve”, “better”, “freedom” and “peace”.  Additionally, the shared negative-sentiment words like “crime”, “corruption” and “poverty” foreground the commonality of perpetuating problems that became pronounced throughout all presidential tenures after de Klerk. 


```{python}

import pandas as pd
import nltk
from nltk.corpus import opinion_lexicon
from nltk.tokenize import treebank
from afinn import Afinn

from dateutil import parser

# Function to parse date strings based on the described rule
def parse_date(date_str):
    # Split the string by comma and take the last part
    date_part = date_str.split(',')[-1].strip()
    # Parse the date part into a datetime object
    return parser.parse(date_part)

# Define a function to get Bing lexicon sentiment scores
def get_bing_sentiment(text):
    tokenizer = treebank.TreebankWordTokenizer()
    tokens = tokenizer.tokenize(text.lower())
    pos_score = sum(1 for word in tokens if word in positive_words)
    neg_score = sum(1 for word in tokens if word in negative_words)
    compound_score = pos_score - neg_score
    return compound_score


# Load the AFINN lexicon
afinn = Afinn()

# Define a function to get AFINN sentiment scores
def get_afinn_sentiment(text):
    return afinn.score(text)

# Load positive and negative words
positive_words = set(opinion_lexicon.positive())
negative_words = set(opinion_lexicon.negative())

# Apply Bing sentiment analysis
sona_speeches_clean['bing_sentiment'] = sona_speeches_clean['speech_untrans'].apply(get_bing_sentiment)
sona_sentences_all_untrans['bing_sentiment'] = sona_sentences_all_untrans['sent_untrans'].apply(get_bing_sentiment)

# Apply AFINN sentiment analysis
sona_speeches_clean['afinn_sentiment'] = sona_speeches_clean['speech_untrans'].apply(lambda text: get_afinn_sentiment(text))
sona_sentences_all_untrans['afinn_sentiment'] = sona_sentences_all_untrans['sent_untrans'].apply(lambda text: get_afinn_sentiment(text))

# Convert the date strings to datetime objects
sona_speeches_clean['date'] = sona_speeches_clean['date'].apply(parse_date)
sona_sentences_all_untrans['date'] = sona_sentences_all_untrans['date'].apply(parse_date)

# Sort the DataFrames by date in ascending order
sona_speeches_clean.sort_values('date', ascending=True, inplace=True)
#sona_sentences_all_untrans.sort_values('date', ascending=True, inplace=True)

# Create a new variable which is the date as a string
sona_speeches_clean['date_str'] = sona_speeches_clean['date'].dt.strftime('%Y-%m-%d')
sona_sentences_all_untrans['date_str'] = sona_sentences_all_untrans['date'].dt.strftime('%Y-%m-%d')

```


```{python}

import matplotlib.pyplot as plt
import pandas as pd

# For plotting sentiment scores of speeches by each president
def plot_speeches_by_president(df, lexicon):
    plt.figure(figsize=(10, 6))

    presidents = df['president'].unique()

    lexicon_lab = lexicon

    if lexicon == 'afinn':
        lexicon_lab = 'AFINN'

    colors = ['lightsteelblue', colormap[1], 'midnightblue', 'lightgray', 'darkgray',  'dimgray']

    for idx, president in enumerate(presidents):
        president_df = df[df['president'] == president]
        plt.bar(president_df['date_str'], president_df[f'{lexicon}_sentiment'], label=president, color=colors[idx])
    plt.xlabel('Date')
    plt.ylabel(f'Sentiment Score')
    plt.xticks(rotation=90)
    plt.yticks()
    plt.legend(loc ="upper left", fontsize=14)
    plt.savefig(f'sentiment_plots/speech_{lexicon}_all.png', bbox_inches='tight')
    plt.close()  # Close the figure to avoid displaying it in the notebook


# For plotting sentiment scores of sentences by each president
def plot_sentences_by_president(df, lexicon):
    #plt.figure(figsize=(10, 6))

    presidents = df['president'].unique()

    colors = [colormap[1],  'dimgray', 'midnightblue', 'darkgray', 'lightsteelblue', 'lightgray']

    lexicon_lab = lexicon

    if lexicon == 'afinn':
        lexicon_lab = 'AFINN'
    
    # Create a copy of the DataFrame
    df = df.copy()

    # Add a column for the sentence number
    df['sentence_num'] = df.groupby('date_str').cumcount() + 1
    
    i = 0

    for idx, president in enumerate(presidents):
        plt.figure(figsize=(10, 6))
        president_df = df[df['president'] == president]
        plt.bar(president_df['sentence_num'], president_df[f'{lexicon}_sentiment'], label=president, color=colors[i])
        plt.xlabel('Sentence')
        plt.ylabel(f'Sentiment Score')
        plt.xticks()
        plt.savefig(f'sentiment_plots/sent_{lexicon}_{president}.png', bbox_inches='tight')
        plt.close()  # Close the figure to avoid displaying it in the notebook

        i += 1

    
# Assuming 'date' is a column in datetime format and 'president' is the name of each president
plot_speeches_by_president(sona_speeches_clean, 'bing')
plot_speeches_by_president(sona_speeches_clean, 'afinn')

plot_sentences_by_president(sona_sentences_all_untrans, 'bing')
plot_sentences_by_president(sona_sentences_all_untrans, 'afinn')


```

```{python}


# Function to calculate word sentiments across all speeches of a president
def calculate_word_sentiments(president_speeches, lexicon):
    # Combine all speeches into one large text
    all_speeches = ' '.join(president_speeches)
    # Tokenize the text into words and filter out stopwords and non-alphabetic tokens
    words = [word for word in word_tokenize(all_speeches.lower()) if word.isalpha() and word not in stopwords.words('english')]
    # Get sentiment score for each word
    word_sentiments = defaultdict(int)
    for word in words:
        # Get the sentiment score for the word
        if lexicon == 'bing':
            sentiment = get_bing_sentiment(word)
        elif lexicon == 'afinn':
            sentiment = get_afinn_sentiment(word)

        word_sentiments[word] += sentiment
    return word_sentiments

# Function to plot the top positive and negative words
def plot_top_words(word_sentiments, president, lexicon):
    # Sort words by sentiment score
    sorted_words = sorted(word_sentiments.items(), key=lambda kv: kv[1])
    # Select the top 10 positive and negative words
    top_positive_words = sorted_words[-10:]
    top_negative_words = sorted_words[:10]

    # Words and their sentiment scores for plotting
    words_positive, scores_positive = zip(*top_positive_words)
    words_negative, scores_negative = zip(*top_negative_words)

    fig, ax = plt.subplots(figsize=(10, 6))

    # Plot the top negative words
    ax.barh(range(10), scores_negative, color=colormap[2], label='Negative')
    # Plot the top positive words
    ax.barh(range(10, 20), scores_positive, color=colormap[0], label='Positive')

    # Add the word labels
    ax.set_yticks(range(20))
    ax.set_yticklabels(words_negative + words_positive)
    
    # Set the labels and title
    ax.set_xlabel(f'Contribution to Sentiment Score')
    ax.legend(loc = "lower right")

    # Adjust the view so negative words are at the bottom and positive at the top
    ax.set_ylim(-1, 20)
    
    plt.tight_layout()
    # Save the plot as a PNG file
    plt.savefig(f'sentiment_plots/word_contr_{lexicon}_{president}.png', bbox_inches='tight')
    plt.close()  # Close the figure to avoid displaying it in the notebook

# Aggregate the speeches by president and calculate the top words
presidents_speeches = sona_speeches_clean.groupby('president')['speech_untrans'].apply(list)
for president, speeches in presidents_speeches.items():
    word_sentiments_bing = calculate_word_sentiments(speeches, 'bing')
    word_sentiments_afinn = calculate_word_sentiments(speeches, 'afinn')
    plot_top_words(word_sentiments_bing, president, 'bing')
    plot_top_words(word_sentiments_bing, president, 'AFINN')

```


```{python}

# Function to calculate word sentiments across all speeches
def calculate_word_sentiments(speeches, lexicon):
    # Combine all speeches into one large text
    all_speeches = ' '.join(speeches)
    # Tokenize the text into words and filter out stopwords and non-alphabetic tokens
    words = [word for word in word_tokenize(all_speeches.lower()) if word.isalpha() and word not in stopwords.words('english')]
    # Get sentiment score for each word
    word_sentiments = defaultdict(int)
    for word in words:
        # Get the sentiment score for the word
        if lexicon == 'bing':
            sentiment = get_bing_sentiment(word)
        elif lexicon == 'afinn':
            sentiment = get_afinn_sentiment(word)

        word_sentiments[word] += sentiment
    return word_sentiments

# Function to plot the top positive and negative words
def plot_top_words(word_sentiments, lexicon):
    # Sort words by sentiment score
    sorted_words = sorted(word_sentiments.items(), key=lambda kv: kv[1])
    # Select the top 10 positive and negative words
    top_positive_words = sorted_words[-10:]
    top_negative_words = sorted_words[:10]

    # Words and their sentiment scores for plotting
    words_positive, scores_positive = zip(*top_positive_words)
    words_negative, scores_negative = zip(*top_negative_words)

    fig, ax = plt.subplots(figsize=(10, 6))

    # Plot the top negative words
    ax.barh(range(10), scores_negative, color=colormap[2], label='Negative')
    # Plot the top positive words
    ax.barh(range(10, 20), scores_positive, color=colormap[0], label='Positive')

    # Add the word labels
    ax.set_yticks(range(20))
    ax.set_yticklabels(words_negative + words_positive)
    # ax.yticks(fontsize=16)

    # Set the labels and title
    ax.set_xlabel(f'Contribution to Sentiment Score')
    ax.legend()
    # ax.xticks(fontsize=16)

    # Adjust the view so negative words are at the bottom and positive at the top
    ax.set_ylim(-1, 20)
    
    plt.tight_layout()
    plt.savefig(f'sentiment_plots/word_contr_{lexicon}_all.png', bbox_inches='tight')
    plt.close()  # Close the figure to avoid displaying it in the notebook

# Calculate the word sentiments across all speeches for each lexicon
all_speeches = sona_speeches_clean['speech_untrans'].tolist()
word_sentiments_bing = calculate_word_sentiments(all_speeches, 'bing')
word_sentiments_afinn = calculate_word_sentiments(all_speeches, 'afinn')

# Plot the top words for each lexicon
plot_top_words(word_sentiments_bing, 'bing')
plot_top_words(word_sentiments_afinn, 'AFINN')

```


<h5> Topic modelling Results </h5>
<hr> 

<h4> Latent Semantic Analysis (LSA) </h4> 

In the micro-context (i.e., word tokenization) of LSA implementation, the maximum coherence score of approximately -1.5 seen in @fig-words-coherence indicates that three topics are optimal when utilizing the tf-idf approach. In contrast, there is no discernible difference in the coherence scores across a range of topic numbers when instead using the BoW approach. Hence, for comparative purposes, three topics are also chosen as best in this instance.

![Coherence plot for LSA where SONA speeches were tokenized by words.](lsa_plots/words_coherence_plots){width=500 height=300 #fig-words-coherence}

Considering @fig-LSA-words-topics, a different overarching focus seems to come to the fore contingent on whether the BoW or tf-idf approach is examined. With reference to the BoW-related corpus, the broad scope of the three topics appears associated to national frameworks and the future thereof. More particularly, the first topic labelled as governance alludes to processes (“work”, “development”) established by institutions (“government”) which direct communities (“public”, “people”).
Words like “infrastructure”, “investment” and “energy” seem to indicate structural resources, which encompasses the second topic.  The third topic, sustainability, is more related to the prospective of long-term (“years”) endurance (“continue”) across these governmental processes and resources. 

On the other hand, with respect to the tf-idf-related corpus, the three topics now instead appear concentrated on current issues. The first topic centers on a sole problem, particularly that of common (“compatriots”) “pandemic” preparedness (“plan”). Whereas, the second topic broadens to other additional issues contextual to the country. Hence, in this case, the challenges range from energy (“eskom”) problems (“loadshedding”) to the “covid” “pandemic” to the government’s corruption (state “capture”). Most words contained in the third topic all already feature in topic one or two already. Given this lack of unique distinction, topic three is said to simply be a synthesis of the two, aforementioned topics. 

::: {#fig-LSA-words-topics layout-ncol=2}

![BoW: Topic 1 ~ governance](lsa_plots/words_bow_topic_1.png){#fig-words-bow-topic1}

![tf-idf: Topic 1 ~ pandemic preparedness](lsa_plots/words_tfidf_topic_1.png){#fig-words-tfidf-topic1}

![BoW: Topic 2 ~ structural resources](lsa_plots/words_bow_topic_2.png){#fig-words-bow-topic2}

![tf-idf: Topic 2 ~ contemporary challenges](lsa_plots/words_tfidf_topic_2.png){#fig-words-tfidf-topic2}

![BoW: Topic 3 ~ sustainability](lsa_plots/words_bow_topic_3.png){#fig-words-bow-topic3}

![tf-idf: Topic 3 ~ an amalgamation](lsa_plots/words_tfidf_topic_3.png){#fig-words-tfidf-topic3}

Topic-by-word plots for BoW (left) and tf-idf (right) approach for LSA implementation.
:::

Unlike within the micro-context, LSA now applied in the maro-context (i.e., sentence tokenization) indicates more variability in the choice of the optimal topic number for both BoW and tf-idf approaches. Due to the excessive jumps between high and low coherence scores across the topic amounts seen in @fig-sentences-coherence, it is opted to choose the lowest best number. This choice aims to limit potential theme-overlapping (i.e., many common words shared across topics) and allow for more conciseness. 

![Coherence plot for LSA where SONA speeches were tokenized by sentences.](lsa_plots/sentence_coherence_plots.png){width=500 height=300 #fig-sentences-coherence}


Given @fig-LSA-sentences-topics, more of an overlap in topic scope across both corpus types is seen for the sentence-tokenized speeches. For instance, the second topic for the BoW-related corpus and the first topic for the tf-idf-related corpus are both labelled as governance, given the commonly shared words (“government”, “people”, “work” and “development”). The first topic for this former-mentioned corpus accounts for the internal structures (“leaders”, “assembly”, “president”, “members”) related to governance. Whilst, the second topic of the tf-idf-related corpus is very distinguishable with the dominant weighting of the word “thank”, connotated with a sense of gratitude. This topic also refers to some reformation indicators like “opportunity” and “growth”. 

::: {#fig-LSA-sentences-topics layout-ncol=2}

![BoW: Topic 1 ~ governmental structures](lsa_plots/sentences_bow_topic_1.png){#fig-sentences-bow-topic1}

![tf-idf: Topic 1 ~ governance](lsa_plots/sentences_tfidf_topic_1.png){#fig-sentences-tfidf-topic1}

![BoW: Topic 2 ~  governance](lsa_plots/sentences_bow_topic_2.png){#fig-sentences-bow-topic2}

![tf-idf: Topic 2 ~ reformation and gratitude](lsa_plots/sentences_tfidf_topic_2.png){#fig-sentences-tfidf-topic2}


SONA speeches tokenized by sentences for BoW (left) and tf-idf (right) approach for LSA implementation.
:::


```{python}
#| eval: false

# Run 2.5

texts = sona_speeches_clean['speech']
sentences = sona_sentences_alltogether['sentence']

# Further process tokens using gensim's simple_preprocess
tokenized_texts = [simple_preprocess(doc, deacc=True) for doc in texts]  # deacc=True removes punctuations
tokenized_sentences = [simple_preprocess(doc, deacc=True) for doc in sentences]  # deacc=True removes punctuations

# Create a Gensim dictionary from the tokenized documents
dictionary = corpora.Dictionary(tokenized_texts)
dict_sentences = corpora.Dictionary(tokenized_sentences)

#dictionary.filter_extremes(no_below=2, no_above=0.7)
#dict_sentences.filter_extremes(no_below=2, no_above=0.7)

# Create a BOW corpus
bow_corpus = [dictionary.doc2bow(text) for text in tokenized_texts]
bow_corpus_sentences = [dict_sentences.doc2bow(text) for text in tokenized_sentences]

# Create a TF-IDF corpus
tfidf = TfidfModel(bow_corpus)
tfidf_corpus = tfidf[bow_corpus]

tfidf_sentences = TfidfModel(bow_corpus_sentences)
tfidf_corpus_sentences = tfidf_sentences[bow_corpus_sentences]


```

```{python}

# Define the function to compute coherence values
def compute_coherence_values(dictionary, corpus, texts, start, limit, step, coherence='u_mass'):
    coherence_values = []
    model_list = []
    for num_topics in range(start, limit, step):
        model = LsiModel(corpus=corpus, num_topics=num_topics, id2word=dictionary)
        model_list.append(model)
        coherencemodel = CoherenceModel(model=model, texts=tokenized_texts, dictionary=dictionary, coherence=coherence)
        coherence_values.append(coherencemodel.get_coherence())
    return model_list, coherence_values

# Set parameters
start, limit, step = 2, 20, 1

# Compute coherence values for BOW
bow_model_list, bow_coherence_values = compute_coherence_values(dictionary=dictionary, corpus=bow_corpus, texts=texts, start=start, limit=limit, step=step)

bow_model_list_sentences, bow_coherence_values_sentences = compute_coherence_values(dictionary=dict_sentences, corpus=bow_corpus_sentences, texts=sentences, start=start, limit=limit, step=step)

# Compute coherence values for TF-IDF
tfidf_model_list, tfidf_coherence_values = compute_coherence_values(dictionary=dictionary, corpus=tfidf_corpus, texts=tokenized_texts, start=start, limit=limit, step=step)

tfidf_model_list_sentences, tfidf_coherence_values_sentences = compute_coherence_values(dictionary=dict_sentences, corpus=tfidf_corpus_sentences, texts=sentences, start=start, limit=limit, step=step)

# Save the to csv
coherence_df = pd.DataFrame({'bow_coherence_values': bow_coherence_values, 'tfidf_coherence_values': tfidf_coherence_values, 'bow_coherence_values_sentences': bow_coherence_values_sentences, 'tfidf_coherence_values_sentences': tfidf_coherence_values_sentences})

coherence_df.to_csv('lsa_plots/coherence_values.csv', index=False)

```


```{python}
#| eval: false

from matplotlib.ticker import MaxNLocator

# Read in the coherence values
coherence_df = pd.read_csv('lsa_plots/coherence_values.csv')

# Extract the coherence values
bow_coherence_values = coherence_df['bow_coherence_values']
tfidf_coherence_values = coherence_df['tfidf_coherence_values']
bow_coherence_values_sentences = coherence_df['bow_coherence_values_sentences']
tfidf_coherence_values_sentences = coherence_df['tfidf_coherence_values_sentences']

# Plotting the coherence values
x = range(start, limit, step)
plt.figure(figsize=(10, 6))
plt.plot(x, bow_coherence_values, label='BoW', color='midnightblue')
plt.plot(x, tfidf_coherence_values, label='tf-idf', color='darkgray')
plt.xlabel("Number of Topics")
plt.ylabel("Coherence score")
plt.legend(loc='lower left')
plt.gca().xaxis.set_major_locator(MaxNLocator(integer=True))
plt.savefig(f'lsa_plots/words_coherence_plots.png', bbox_inches='tight')
plt.close()


# Plotting the coherence values
x = range(start, limit, step)
plt.figure(figsize=(10, 6))
plt.plot(x, bow_coherence_values_sentences, label='BoW', color='midnightblue')
plt.plot(x, tfidf_coherence_values_sentences, label='tf-idf', color='darkgray')
plt.xlabel("Number of Topics")
plt.ylabel("Coherence score")
plt.legend(loc='lower right')
plt.gca().xaxis.set_major_locator(MaxNLocator(integer=True))
plt.savefig(f'lsa_plots/sentence_coherence_plots.png', bbox_inches='tight')
plt.close()

```


```{python}

# Run 3

# TODO: Set the number of topics based on the plots
lsa_bow_words = LsiModel(corpus=bow_corpus, num_topics=3, id2word=dictionary)
lsa_bow_sentences = LsiModel(corpus=bow_corpus_sentences, num_topics=2, id2word=dict_sentences)

lsa_tfidf_words = LsiModel(corpus=tfidf_corpus, num_topics=3, id2word=dictionary)
lsa_tfidf_sentences = LsiModel(corpus=tfidf_corpus_sentences, num_topics=2, id2word=dict_sentences)

```


```{python}

# Run 4

import matplotlib.pyplot as plt

# Function to plot the top words for each topic in a single LSA model
def plot_top_words_for_each_topic(model, fiton, lexicon, num_words=10):

    colors = ['lightsteelblue', 'midnightblue', 'lightgray', 'darkgray', 'dimgray']
    
    j = 0

    for i in range(model.num_topics):
        # Extract the top words for this topic
        top_words = model.show_topic(i, num_words)
        # Separate the words and their corresponding weights
        words, weights = zip(*top_words)
        weights = [abs(weight) for weight in weights]  # Use absolute values for weights

        # Create a bar chart for the top words in this topic
        plt.figure(figsize=(10, 6))
        plt.barh(words, weights, color = colors[j])
        # ax.set_yticklabels(words, fontsize=20)
        j += 1

        if j == 4:
            j = 0

        plt.xlabel('Weight')
        plt.gca().invert_yaxis()  # Highest weights on top
        plt.savefig(f'lsa_plots/{fiton}_{lexicon}_topic_{i + 1}.png', bbox_inches='tight')
        plt.close()


# Apply the plotting function to each of your LSA models
plot_top_words_for_each_topic(lsa_bow_words, 'words', 'bow')
plot_top_words_for_each_topic(lsa_bow_sentences, 'sentences', 'bow')
plot_top_words_for_each_topic(lsa_tfidf_words, 'words', 'tfidf')
plot_top_words_for_each_topic(lsa_tfidf_sentences, 'sentences', 'tfidf')

```


<h4> pLSA </h4> 

As previously found with the implementation of LSA, there is essentially no variability in the coherence scores when utilizing the BoW approach for the word-tokenized application of pLSA. Though, like with LSA, there are fluctuating changes in the coherence scores across topic numbers when considering the tf-idf approach. Again, it is opted to take the minimum-best (based on tf-idf) number of three topics for both approaches which

![Coherence plot for pLSA where SONA speeches were tokenized by words.](plsa_plots/words_coherence.png){width=500 height=300 #fig-pLSA-words-coherence}

::: {#fig-pLSA-words-topics layout-ncol=2}

![BoW: Topic 1](plsa_plots/words-BoW_topic_1.png){#fig-pLSA-words-bow-topic1}

![tf-idf: Topic 1](plsa_plots/words-tf-idf_topic_1.png){#fig-pLSA-words-tfidf-topic1}

![BoW: Topic 2](plsa_plots/words-BoW_topic_2.png){#fig-pLSA-words-bow-topic2}

![tf-idf: Topic 2](plsa_plots/words-tf-idf_topic_2.png){#fig-pLSA-words-tfidf-topic2}

![BoW: Topic 3](plsa_plots/words-BoW_topic_3.png){#fig-pLSA-words-bow-topic3}

![tf-idf: Topic 3](plsa_plots/words-tf-idf_topic_3.png){#fig-pLSA-words-tfidf-topic3}

![BoW: Topic 4](plsa_plots/words-BoW_topic_4.png){#fig-pLSA-words-bow-topic4}

![tf-idf: Topic 4](plsa_plots/words-tf-idf_topic_4.png){#fig-pLSA-words-tfidf-topic4}

![BoW: Topic 5](plsa_plots/words-BoW_topic_5.png){#fig-pLSA-words-bow-topic5}

![tf-idf: Topic 5](plsa_plots/words-tf-idf_topic_5.png){#fig-pLSA-words-tfidf-topic5}

Topic plots for pLSA tokenized by words and executed within a BoW (left) and tf-idf (right) framework. 
:::


![Coherence plot for pLSA where SONA speeches were tokenized by sentences.](plsa_plots/sentences_coherence.png){width=500 height=300 #fig-pLSA-sentences-coherence}

::: {#fig-pLSA-sentences-topics layout-ncol=2}

![BoW: Topic 1](plsa_plots/sentences-BoW_topic_1.png){#fig-pLSA-sentences-bow-topic1}

![tf-idf: Topic 1](plsa_plots/sentences-tf-idf_topic_1.png){#fig-pLSA-sentences-tfidf-topic1}

![BoW: Topic 2](plsa_plots/sentences-BoW_topic_2.png){#fig-pLSA-sentences-bow-topic2}

![tf-idf: Topic 2](plsa_plots/sentences-tf-idf_topic_2.png){#fig-pLSA-sentences-tfidf-topic2}

![BoW: Topic 3](plsa_plots/sentences-BoW_topic_3.png){#fig-pLSA-sentences-bow-topic3}

![tf-idf: Topic 3](plsa_plots/sentences-tf-idf_topic_3.png){#fig-pLSA-sentences-tfidf-topic3}

![BoW: Topic 4](plsa_plots/sentences-BoW_topic_4.png){#fig-pLSA-sentences-bow-topic4}

![tf-idf: Topic 4](plsa_plots/sentences-tf-idf_topic_4.png){#fig-pLSA-sentences-tfidf-topic4}

Topic plots for pLSA using sentences as tokens and applied within a BoW (left) and tf-idf (right) framework. 
:::



```{python}

sona_speeches_clean['speech'].to_csv('data/sona_speeches_only.csv', index=False)
sona_sentences_alltogether['sentence'].to_csv('data/sona_sentences_only.csv', index=False)

```

```{python}

import math

def calculate_umass_coherence(plsa_result, corpus, top_n=10, tf_idf=False):
    # Extract the top N words for each topic
    top_words_by_topic = [
        [word for word, _ in plsa_result.word_given_topic[i][:top_n]]
        for i in range(plsa_result.n_topics)
    ]
    
    # Get document-word matrix (document frequency matrix)
    doc_word_matrix = corpus.get_doc_word(tf_idf=tf_idf)
    
    # Calculate document frequencies for single words
    word_doc_freq = np.sum(doc_word_matrix > 0, axis=0)
    
    # Calculate coherence for each topic
    topic_coherences = []
    for top_words in top_words_by_topic:
        pair_scores = []
        for i, word in enumerate(top_words):
            for j in range(i + 1, len(top_words)):
                # Get indices in the vocabulary
                word_i_index = corpus.index[word]
                word_j_index = corpus.index[top_words[j]]
                
                # Count the documents where both words appear
                both_docs = np.sum((doc_word_matrix[:, word_i_index] > 0) & (doc_word_matrix[:, word_j_index] > 0))
                
                # Calculate score for this word pair
                score = math.log((both_docs + 1.0) / word_doc_freq[word_i_index])  # Add 1 to avoid log(0)
                pair_scores.append(score)
                
        # Average over all pairs to get the topic coherence
        topic_coherence = sum(pair_scores) / len(pair_scores)
        topic_coherences.append(topic_coherence)
        
    # Average over all topics to get the overall coherence
    overall_coherence = sum(topic_coherences) / len(topic_coherences)
    return overall_coherence


```


```{python}

# Run 4.5

pipeline = Pipeline(*DEFAULT_PIPELINE)

corpus = Corpus.from_csv("data/sona_speeches_only.csv", pipeline)
corpus_sent = Corpus.from_csv("data/sona_sentences_only.csv", pipeline)

```


```{python}

topic_numbers = range(2, 12, 1)

# Loop over the topic number and calculate the coherence values
bow_coherence_values = []
bow_coherence_values_sent = []
tfidf_coherence_values = []
tfidf_coherence_values_sent = []

for n_topics in topic_numbers:
    # Initialize the models
    tfidf_plsa = PLSA(corpus, n_topics, tf_idf=True)
    bow_plsa = PLSA(corpus, n_topics, tf_idf=False)

    tfidf_plsa_sent = PLSA(corpus_sent, n_topics, tf_idf=True)
    bow_plsa_sent = PLSA(corpus_sent, n_topics, tf_idf=False)

    # Fit the models
    tfidf_result = tfidf_plsa.fit()
    bow_result = bow_plsa.fit()
    tfidf_result_sent = tfidf_plsa_sent.fit()
    bow_result_sent = bow_plsa_sent.fit()

    # Calculate the coherence values
    bow_coherence_values.append(calculate_umass_coherence(bow_result, corpus, tf_idf=False))
    tfidf_coherence_values.append(calculate_umass_coherence(tfidf_result, corpus, tf_idf=True))
    bow_coherence_values_sent.append(calculate_umass_coherence(bow_result_sent, corpus_sent, tf_idf=False))
    tfidf_coherence_values_sent.append(calculate_umass_coherence(tfidf_result_sent, corpus_sent, tf_idf=True))

```


```{python}

# Save the coherence value results
pd.DataFrame({
    'topic_number': topic_numbers,
    'bow_coherence': bow_coherence_values,
    'tfidf_coherence': tfidf_coherence_values,
    'bow_coherence_sent': bow_coherence_values_sent,
    'tfidf_coherence_sent': tfidf_coherence_values_sent
}).to_csv('data/saved_plsa_coherence_values.csv', index=False)

```


```{python}
#| eval: true

# Load the coherence value results
coherence_values = pd.read_csv('data/saved_plsa_coherence_values.csv')

topic_numbers = coherence_values['topic_number']
bow_coherence_values = coherence_values['bow_coherence']
tfidf_coherence_values = coherence_values['tfidf_coherence']
bow_coherence_values_sent = coherence_values['bow_coherence_sent']
tfidf_coherence_values_sent = coherence_values['tfidf_coherence_sent']

# Plot the speech coherence values - updated
plt.figure(figsize=(10, 6))
plt.plot(topic_numbers, bow_coherence_values, label='BoW', color='midnightblue')
plt.plot(topic_numbers, tfidf_coherence_values, label='tf-idf', color='darkgray')
plt.xlabel("Number of Topics")
plt.ylabel("Coherence score")
plt.legend(loc='lower right')
plt.savefig(f'plsa_plots/words_coherence.png', bbox_inches='tight')
plt.close()


# Plot the sentence coherence values - updated
plt.figure(figsize=(10, 6))
plt.plot(topic_numbers, bow_coherence_values_sent, label='BoW', color='midnightblue')
plt.plot(topic_numbers, tfidf_coherence_values_sent, label='tf-idf', color='darkgray')
plt.xlabel("Number of Topics")
plt.ylabel("Coherence score")
plt.legend(loc='lower right')
plt.savefig(f'plsa_plots/sentences_coherence.png', bbox_inches='tight')
plt.close()

```


```{python}

# Run 5

# TODO: Change to the official number of topics

# Fit the models with the calibrated number of topics
tfidf_plsa = PLSA(corpus, 5, tf_idf=True)
bow_plsa = PLSA(corpus, 5, tf_idf=False)
tfidf_plsa_sent = PLSA(corpus_sent, 4, tf_idf=True)
bow_plsa_sent = PLSA(corpus_sent, 4, tf_idf=False)

# Fit the models
tfidf_result = tfidf_plsa.fit()
bow_result = bow_plsa.fit()
tfidf_result_sent = tfidf_plsa_sent.fit()
bow_result_sent = bow_plsa_sent.fit()

```

```{python}

# Run 6

# Function to plot the top words for a given topic
def plot_top_words_for_topic(word_given_topic, topic_num, corptype, color, top_n=10):
    # Extract the top words for this topic
    top_words_data = word_given_topic[topic_num][:top_n]
    words, probabilities = zip(*top_words_data)

    # Create a bar plot
    plt.figure(figsize=(10, 6))
    plt.barh(words, probabilities, color=color)
    plt.xlabel('Probability')
    plt.gca().invert_yaxis() 
    plt.savefig(f'plsa_plots/{corptype}_topic_{topic_num + 1}.png', bbox_inches='tight')
    plt.close()


def plot_word_contribution(result, corptype):
    # Number of topics in your model
    n_topics = len(result.word_given_topic)

    colours = ['lightsteelblue', 'midnightblue', 'lightgray', 'darkgray', 'dimgray']
    
    i = 0

    # Plot the top words for each topic
    for topic_num in range(n_topics):
        plot_top_words_for_topic(result.word_given_topic, topic_num, corptype, colours[i])
        i+=1

        if i == 4:
            i = 0

# Plot the word contribution for each topic for each model
plot_word_contribution(bow_result, 'words-BoW')
plot_word_contribution(tfidf_result, 'words-tf-idf')
plot_word_contribution(bow_result_sent, 'sentences-BoW')
plot_word_contribution(tfidf_result_sent, 'sentences-tf-idf')




```


<h4> LDA </h4> 

::: {#fig-LDA-contours layout-ncol=2}

![Words](lda_plots/words_contour_plot.png){#fig-LDA-contour-words}

![Sentences](lda_plots/sentences_contour_plot.png){#fig-LDA-contour-sentences}

Contour plots visualizing variation in coherence scores tuned across range of different $\alpha$ and $\beta$ hyperparameter values. 
:::


```{python}
#| eval: true

texts = sona_speeches_clean['speech']
sentences = sona_sentences_alltogether['sentence']

# Further process tokens using gensim's simple_preprocess
tokenized_texts = [simple_preprocess(doc, deacc=True) for doc in texts]  # deacc=True removes punctuations
tokenized_sentences = [simple_preprocess(doc, deacc=True) for doc in sentences]  # deacc=True removes punctuations

# Create a Gensim dictionary from the tokenized documents
dictionary = corpora.Dictionary(tokenized_texts)
dictionary.filter_extremes(no_below=3, no_above=0.7)

dict_sentences = corpora.Dictionary(tokenized_sentences)
dict_sentences.filter_extremes(no_below=3, no_above=0.7)

# Create a BOW corpus
bow_corpus = [dictionary.doc2bow(text) for text in tokenized_texts]
bow_corpus_sentences = [dict_sentences.doc2bow(text) for text in tokenized_sentences]

# Create a TF-IDF corpus
tfidf = TfidfModel(bow_corpus)
tfidf_corpus = tfidf[bow_corpus]

tfidf_sentences = TfidfModel(bow_corpus_sentences)
tfidf_corpus_sentences = tfidf_sentences[bow_corpus_sentences]

```


```{python}

# Define the function to compute coherence values
def compute_coherence_values(corpus, dictionary, k, a, b, texts):
    lda_model = LdaModel(corpus=corpus,
                         id2word=dictionary,
                         num_topics=k, 
                         random_state=100,
                         eval_every=None,
                         alpha=a,
                         eta=b)
    
    coherence_model_lda = CoherenceModel(model=lda_model, texts=texts, dictionary=dictionary, coherence='u_mass')
    
    return coherence_model_lda.get_coherence()

# Define the parameter space for grid search
grid = {}
grid['Validation_Set'] = {}
# Topics range
min_topics = 2
max_topics = 10
step_size = 1
topics_range = range(min_topics, max_topics, step_size)
# Alpha parameter
alpha = list(np.arange(0.1, 1, 0.1))
# Beta parameter
beta = list(np.arange(0.1, 1, 0.2))

# Validation sets
num_of_docs = len(bow_corpus)
corpus_sets = [tfidf_corpus, 
               bow_corpus]
corpus_title = ['TF-IDF Corpus', 'BoW Corpus']
model_results = {'Validation_Set': [],
                 'Topics': [],
                 'Alpha': [],
                 'Beta': [],
                 'Coherence': []
                }
model_results_sentences = {'Validation_Set': [],
                 'Topics': [],
                 'Alpha': [],
                 'Beta': [],
                 'Coherence': []
                }

# Can take a long time to run
# If you want to only test a few models, reduce the number of steps in topics_range
# and/or limit the number of values in alpha and beta lists.
if 1 == 1:
    pbar = tqdm.tqdm(total=(max_topics-min_topics)*len(alpha)*len(beta)*len(corpus_sets))
    
    # iterate through validation corpuses
    for i in range(len(corpus_sets)):
        # iterate through number of topics
        for k in topics_range:
            # iterate through alpha values
            for a in alpha:
                # iterare through beta values
                for b in beta:
                    # get the coherence score for the given parameters
                    cv = compute_coherence_values(corpus=corpus_sets[i], dictionary=dictionary, k=k, a=a, b=b, texts=tokenized_texts)
                    # Save the model results
                    model_results['Validation_Set'].append(corpus_title[i])
                    model_results['Topics'].append(k)
                    model_results['Alpha'].append(a)
                    model_results['Beta'].append(b)
                    model_results['Coherence'].append(cv)
                    
                    pbar.update(1)
    pbar.close()


# Get the results for the sentences
if 1 == 1:
    pbar = tqdm.tqdm(total=(max_topics-min_topics)*len(alpha)*len(beta)*len(corpus_sets))
    
    # iterate through validation corpuses
    for i in range(len(corpus_sets)):
        # iterate through number of topics
        for k in topics_range:
            # iterate through alpha values
            for a in alpha:
                # iterare through beta values
                for b in beta:
                    # get the coherence score for the given parameters
                    cv = compute_coherence_values(corpus=corpus_sets[i], dictionary=dict_sentences, k=k, a=a, b=b, texts=tokenized_sentences)
                    # Save the model results
                    model_results_sentences['Validation_Set'].append(corpus_title[i])
                    model_results_sentences['Topics'].append(k)
                    model_results_sentences['Alpha'].append(a)
                    model_results_sentences['Beta'].append(b)
                    model_results_sentences['Coherence'].append(cv)
                    
                    pbar.update(1)
    pbar.close()

```


```{python}

# # Save the results to a csv
# model_results_df = pd.DataFrame(model_results)
# model_results_sentences_df = pd.DataFrame(model_results_sentences)

# model_results_df.to_csv('data/sona_speeches_lda.csv', index=False)
# model_results_sentences_df.to_csv('data/sona_sentences_lda.csv', index=False)

```


```{python}
#| eval: true

# Save the results to a csv
model_results_df = pd.read_csv('data/sona_speeches_lda.csv')
sorted_speeches_df = model_results_df.sort_values(by='Coherence', ascending=False)

# Concatenate the head and tail of the DataFrame
combined_speeches_df = pd.concat([sorted_speeches_df.head(5), sorted_speeches_df.tail(5)])

combined_speeches_df['Validation_Set'] = combined_speeches_df['Validation_Set'].replace(['TF-IDF Corpus', 'BoW Corpus'], ['tf-idf', 'BoW'])

# Change the validation set column name from "Validation_Set" to "Corpus"
combined_speeches_df = combined_speeches_df.rename(columns={'Validation_Set': 'Corpus'})

```


```{python}
#| eval: true

# Save the results to a csv
model_results_sentences_df = pd.read_csv('data/sona_sentences_lda.csv')
sorted_sentences_df = model_results_sentences_df.sort_values(by='Coherence', ascending=False)

# Concatenate the head and tail of the DataFrame
combined_sentences_df = pd.concat([sorted_sentences_df.head(5), sorted_sentences_df.tail(5)])
combined_sentences_df['Validation_Set'] = combined_sentences_df['Validation_Set'].replace(['TF-IDF Corpus', 'BoW Corpus'], ['tf-idf', 'BoW'])

# Change the validation set column name from "Validation_Set" to "Corpus"
combined_sentences_df = combined_sentences_df.rename(columns={'Validation_Set': 'Corpus'})

num_cols = combined_sentences_df.select_dtypes(include=['number']).columns

# Remove the first value from the num_cols
num_cols = num_cols[1:]

```


```{python}

# Use pivot_table to handle duplicate (Alpha, Beta) pairs by averaging their coherence values
pivot_table = model_results_df.pivot_table(index='Alpha', columns='Beta', values='Coherence', aggfunc=np.mean)
pivot_table_sentences = model_results_sentences_df.pivot_table(index='Alpha', columns='Beta', values='Coherence', aggfunc=np.mean)

# Create the meshgrid for Alpha and Beta values
Alpha, Beta = np.meshgrid(pivot_table.columns, pivot_table.index)
Alpha_sentences, Beta_sentences = np.meshgrid(pivot_table_sentences.columns, pivot_table_sentences.index)

# Create the contour plot using the values of the pivot_table
# We need to use the values attribute to get the coherence scores as a 2D array
plt.figure(figsize=(8, 6))
cp = plt.contourf(Alpha, Beta, pivot_table.values, cmap='seismic', levels=100)
plt.colorbar(cp)
plt.xlabel('Beta')
plt.ylabel('Alpha')
plt.savefig(f'lda_plots/words_contour_plot.png', bbox_inches='tight')
plt.close()

plt.figure(figsize=(8, 6))
cp = plt.contourf(Alpha_sentences, Beta_sentences, pivot_table_sentences.values, cmap='seismic', levels=100)
plt.colorbar(cp)
plt.xlabel('Beta')
plt.ylabel('Alpha')
plt.savefig(f'lda_plots/sentences_contour_plot.png', bbox_inches='tight')
plt.close()

```

```{python}
#| eval: true
#| output: true
#| label: word-lda
#| tbl-cap: "Table 1: Coherence scores obtained from a hyperparameter-combination grid search for implementation of LDA on SONA speeches tokenized by words."

def style_df(df):
    # Select the numeric columns except the first one
    numeric_cols = df.select_dtypes(include=['number']).columns[1:]
    format_dict = {col: "{:.2f}" for col in numeric_cols}
    styles = [
        dict(selector="th", props=[("text-align", "center")]),
        dict(selector="td", props=[("text-align", "center")]),
        dict(selector="", props=[("margin", "auto"), ("border", "1px solid black")])
    ]
    return df.style.set_table_styles(styles).format(format_dict).hide()


# Save the results to a csv
style_df(combined_speeches_df)

```


```{python}
#| eval: true
#| output: true
#| label: sent-lda
#| tbl-cap: "Table 2: Coherence scores obtained from a hyperparameter-combination grid search for implementation of LDA on SONA speeches tokenized by sentences."

# Save the results to a csv
style_df(combined_sentences_df)

```

```{python}
#| eval: true

# TODO: Set the number of topics based on the plots

# Train the best models for each corpus
lda_model_speeches = LdaModel(corpus=bow_corpus,
                         id2word=dictionary,
                         num_topics=9, 
                         random_state=100,
                         eval_every=None,
                         alpha=0.6,
                         eta=0.5)

lda_model_sentences = LdaModel(corpus=bow_corpus,
                         id2word=dict_sentences,
                         num_topics=2, 
                         random_state=100,
                         eval_every=None,
                         alpha=0.9,
                         eta=0.9)

# Prepare the visualization data
vis_data_speeches = pyLDAvis.gensim_models.prepare(lda_model_speeches, bow_corpus, dictionary)
vis_data_sentences = pyLDAvis.gensim_models.prepare(lda_model_sentences, bow_corpus_sentences, dict_sentences)

```


<b><u> pyLDAvis for Words </b></u>

```{python}
#| eval: true
#| output: true

# Enable the automatic display of visualizations in the Jupyter notebook
pyLDAvis.enable_notebook()

# Display the visualization
pyLDAvis.display(vis_data_speeches)

```

<b><u> pyLDAvis for Sentences </b></u>

```{python}
#| eval: true
#| output: true

# Display the visualization
pyLDAvis.display(vis_data_sentences)


```

<h4> CTM </h4> 


::: {#fig-CTM-coherence layout-ncol=2}

![Words](ctm_plots/words_coherence_plots.png){#fig-ctm-coherence-words}

![Sentences](ctm_plots/sentences_coherence_plots.png){#fig-ctm-coherence-sentences}

Coherence plots for CTM across different tokens (words or sentences) implemented within BoW approach.
:::

::: {#fig-CTM-topics layout-ncol=2}

![Words: Topic 1](ctm_plots/words_1.png){#fig-ctm-words-topic1}

![Sentences: Topic 1](ctm_plots/sentences_1.png){#fig-ctm-sentences-topic1}

![Words: Topic 2](ctm_plots/words_2.png){#fig-ctm-words-topic2}

![Sentences: Topic 2](ctm_plots/sentences_2.png){#fig-ctm-sentences-topic2}

![Sentences: Topic 3](ctm_plots/sentences_3.png){#fig-ctm-sentences-topic3}

Topic plots where either words (left) or sentences (right) were used as tokens for CTM application. 
:::


```{python}

# Run 6.5

# Function to calculate coherence scores
def calculate_coherence(model, metric='u_mass'):
    coherence = tp.coherence.Coherence(model, coherence=metric)
    return coherence.get_score()

# Prepare the data for the CTM model
tokenized_docs = [text.split() for text in sona_speeches_clean['speech']]  # Ensure the texts are tokenized
tokenized_sentences = [text.split() for text in sona_sentences_alltogether['sentence']]  # Ensure the texts are tokenized

```

```{python}

# Define the range of topic numbers you want to test
topic_numbers = range(2, 12, 1)  # for example from 2 to 20 by step of 2

# Store coherence scores for plotting
coherence_scores = []
coherence_scores_sentences = []

for k in topic_numbers:
    # Initialize CTM with the current number of topics
    ctm = tp.CTModel(k=k)
    ctms = tp.CTModel(k=k)

    # Add documents to the model
    for tokens in tokenized_docs:
        ctm.add_doc(tokens)

    # Add sentences to the model
    for tokens in tokenized_sentences:
        ctms.add_doc(tokens)    

    # Train the model
    ctm.train(0)
    ctms.train(0)

    for _ in range(100):
        ctm.train(10)
        ctms.train(10)

    # Calculate and store the coherence score
    score = calculate_coherence(ctm)
    score_sentences = calculate_coherence(ctms)

    coherence_scores.append(score)
    coherence_scores_sentences.append(score_sentences)

    #(f"Topics: {k}, Coherence Score: {score}")

# Save the coherence scores to a csv
pd.DataFrame({
    'topic_number': topic_numbers,
    'bow_coherence_values': coherence_scores,
    'bow_coherence_values_sentences': coherence_scores_sentences
}).to_csv('data/saved_ctm_coherence_values.csv', index=False)

```


```{python}

# Read in the saved values
coherence_values = pd.read_csv('data/saved_ctm_coherence_values.csv')

topic_numbers = coherence_values['topic_number']
coherence_scores = coherence_values['bow_coherence_values']
coherence_scores_sentences = coherence_values['bow_coherence_values_sentences']

# Plot the speech coherence scores
plt.figure(figsize=(10, 6))
plt.plot(topic_numbers, coherence_scores,  color='midnightblue')
plt.xlabel('Number of Topics')
plt.ylabel('Coherence Score')
plt.xticks(topic_numbers)
plt.savefig(f'ctm_plots/words_coherence_plots.png', bbox_inches='tight')
plt.close()

# Plot the sentence coherence scores
plt.figure(figsize=(10, 6))
plt.plot(topic_numbers, coherence_scores_sentences, color='lightsteelblue')
plt.xlabel('Number of Topics')
plt.ylabel('Coherence Score')
plt.xticks(topic_numbers)
plt.savefig(f'ctm_plots/sentences_coherence_plots.png', bbox_inches='tight')
plt.close()


```



```{python}

# TODO: Set the number of topics based on the plots

# Run 7

# Train the models with the optimal number of topics
ctm = tp.CTModel(k=2)
ctms = tp.CTModel(k=3)

# Add documents to the model
for tokens in tokenized_docs:
    ctm.add_doc(tokens)

# Add sentences to the model
for tokens in tokenized_sentences:
    ctms.add_doc(tokens)

# Train the model
ctm.train(0)
ctms.train(0)

for _ in range(100):
    ctm.train(10)
    ctms.train(10)

```

```{python}

# Run 8

# Function to plot the top words for one topic
def plot_top_words_for_topic(model, modtype, topic_num, color, top_n=10):
    # Extract the top words for this topic
    top_words = model.get_topic_words(topic_num, top_n=top_n)
    words, weights = zip(*top_words)

    # Create a bar chart for the top words in this topic
    plt.figure(figsize=(10, 6))
    plt.barh(words, weights, color=color)
    plt.xlabel('Weight')
    plt.gca().invert_yaxis()  # Highest weights on top
    plt.savefig(f'ctm_plots/{modtype}_{topic_num+1}.png', bbox_inches='tight')
    plt.close()

# Plot the top words for each topic for the CTModel of documents
i = 0
colours = ['midnightblue', 'lightsteelblue']

for k in range(ctm.k):
    plot_top_words_for_topic(ctm, 'words', k, colours[i])
    i+=1

    if i == 2:
        i = 0

i = 0
# Plot the top words for each topic for the CTModel of sentences
for k in range(ctms.k):
    plot_top_words_for_topic(ctms, 'sentences', k, colours[i])
    i+=1

    if i == 2:
        i = 0

```

<h4> ATM (Author-Topic Model) </h4> 


::: {#fig-ATM-coherence layout-ncol=2}

![Words](atm_plots/words_coherence_plots_old.png){#fig-atm-coherence-words}

![Sentences](atm_plots/sentences_coherence_plots_old.png){#fig-atm-coherence-sentences}

Coherence plots for ATM across different tokens (words or sentences) implemented within BoW approach.
:::


::: {#fig-ATM-topics layout-ncol=2}

![Words: Topic 1](ctm_plots/words_1.png){#fig-atm-words-topic1}

![Sentences: Topic 1](ctm_plots/sentences_1.png){#fig-atm-sentences-topic1}

![Words: Topic 2](ctm_plots/words_2.png){#fig-atm-words-topic2}

![Sentences: Topic 2](ctm_plots/sentences_2.png){#fig-atm-sentences-topic2}

![Sentences: Topic 3](ctm_plots/sentences_3.png){#fig-atm-sentences-topic3}

Topic plots where either words (left) or sentences (right) were used as tokens for ATM application. 
:::


```{python}
# Run 8.5
# Note that ATM only works for BoW. Raw word counts (BoW) is standard because these models are based on the assumption that the data is generated from a multinomial distribution, which does not hold with TF-IDF weights.

texts = sona_speeches_clean['speech']
sentences = sona_sentences_alltogether['sentence']

# Further process tokens using gensim's simple_preprocess
tokenized_texts = [simple_preprocess(doc, deacc=True) for doc in texts]  # deacc=True removes punctuations
tokenized_sentences = [simple_preprocess(doc, deacc=True) for doc in sentences]  # deacc=True removes punctuations

# Create a Gensim dictionary from the tokenized documents
dictionary = corpora.Dictionary(tokenized_texts)
dictionary.filter_extremes(no_below=3, no_above=0.7)

dict_sentences = corpora.Dictionary(tokenized_sentences)
dict_sentences.filter_extremes(no_below=3, no_above=0.7)

# Create a BOW corpus
bow_corpus = [dictionary.doc2bow(text) for text in tokenized_texts]
bow_corpus_sentences = [dict_sentences.doc2bow(text) for text in tokenized_sentences]

# Prepare the data for the AuthorTopicModel
# Create a mapping of authors to documents
author2doc = {author: [] for author in sona_speeches_clean['president'].unique()}
for i, row in sona_speeches_clean.iterrows():
    author2doc[row['president']].append(i)

# Create a mapping of authors to sentences
author2sent = {author: [] for author in sona_sentences_alltogether['president'].unique()}
for i, row in sona_sentences_alltogether.iterrows():
    author2sent[row['president']].append(i)

```


```{python}

# Define the range of topic numbers you want to test
topic_numbers = range(2, 12, 1)  # for example from 2 to 20 by step of 2

# Store coherence scores for plotting
coherence_scores = []
coherence_scores_sentences = []

for num_topics in topic_numbers:
    # Author-Topic LDA model with the current number of topics
    author_topic_model = AuthorTopicModel(corpus=bow_corpus, author2doc=author2doc, id2word=dictionary, num_topics=num_topics)
    author_topic_model_sentences = AuthorTopicModel(corpus=bow_corpus_sentences, author2doc=author2sent, id2word=dict_sentences, num_topics=num_topics)

    # Train the model
    author_topic_model.update(bow_corpus, author2doc=author2doc)
    author_topic_model_sentences.update(bow_corpus_sentences, author2doc=author2sent)

    # Compute coherence score
    cm = CoherenceModel(model=author_topic_model, texts=tokenized_docs, dictionary=dictionary, coherence='u_mass')
    cm_sentences = CoherenceModel(model=author_topic_model_sentences, texts=tokenized_sentences, dictionary=dict_sentences, coherence='u_mass')

    coherence = cm.get_coherence()
    coherence_sentences = cm_sentences.get_coherence()

    coherence_scores.append(coherence)
    coherence_scores_sentences.append(coherence_sentences)

# Save the coherence scores to a csv
pd.DataFrame({
    'topic_number': topic_numbers,
    'bow_coherence_values': coherence_scores,
    'bow_coherence_values_sentences': coherence_scores_sentences
}).to_csv('data/saved_atm_coherence_values.csv', index=False)

```


```{python}

# Read in the saved values
coherence_values = pd.read_csv('data/saved_atm_coherence_values.csv')

topic_numbers = coherence_values['topic_number']
coherence_scores = coherence_values['bow_coherence_values']
coherence_scores_sentences = coherence_values['bow_coherence_values_sentences']

# Plot the speech coherence scores
plt.figure(figsize=(10, 6))
plt.plot(topic_numbers, coherence_scores,  color='midnightblue')
plt.xlabel('Number of Topics')
plt.ylabel('Coherence Score')
plt.xticks(topic_numbers)
plt.savefig(f'atm_plots/words_coherence_plots.png', bbox_inches='tight')
plt.close()

# Plot the sentence coherence scores
plt.figure(figsize=(10, 6))
plt.plot(topic_numbers, coherence_scores_sentences, color='lightsteelblue')
plt.xlabel('Number of Topics')
plt.ylabel('Coherence Score')
plt.xticks(topic_numbers)
plt.savefig(f'atm_plots/sentences_coherence_plots.png', bbox_inches='tight')
plt.close()

```


```{python}

# Run 9

# TODO: Set the number of topics based on the plots

# Author-Topic LDA model with the current number of topics
author_topic_model = AuthorTopicModel(corpus=bow_corpus, author2doc=author2doc, id2word=dictionary, num_topics=2)
author_topic_model_sentences = AuthorTopicModel(corpus=bow_corpus_sentences, author2doc=author2sent, id2word=dict_sentences, num_topics=3)

# Train the model
author_topic_model.update(bow_corpus, author2doc=author2doc)
author_topic_model_sentences.update(bow_corpus_sentences, author2doc=author2sent)

colours = ['midnightblue', 'lightsteelblue', 'darkgray']

# Function to plot the top words for one topic in an AuthorTopicModel
def plot_top_words_for_author_topic_model(model, modtype, topic_num, colour, top_n=10):
    # Extract the top words for this topic
    top_words = model.get_topic_terms(topic_num, topn=top_n)
    words, weights = zip(*[(model.id2word[word_id], weight) for word_id, weight in top_words])

    # Create a bar chart for the top words in this topic
    plt.figure(figsize=(10, 6))
    plt.barh(words, weights, color=colour)
    plt.xlabel('Weight')
    plt.gca().invert_yaxis()  # Highest weights on top
    plt.savefig(f'atm_plots/{modtype}_{topic_num+1}.png', bbox_inches='tight')
    plt.close()

# Plot the top words for each topic for the AuthorTopicModel of documents
i = 0
for k in range(author_topic_model.num_topics):
    plot_top_words_for_author_topic_model(author_topic_model, "words",k, colours[i])

    i += 1

    if i == 3:
        i = 0

i = 0
# Plot the top words for each topic for the AuthorTopicModel of sentences
for k in range(author_topic_model_sentences.num_topics):
    plot_top_words_for_author_topic_model(author_topic_model_sentences, "sentences", k, colours[i])

    i += 1

    if i == 3:
        i = 0

```


```{python}

# Run 10

from pprint import pprint

def show_author(name, model, topic_labels):
    print('\n%s' % name)
    print('Docs:', pd.Series(author_topic_model.author2doc[name]).unique())
    print('Topics:')
    pprint([(topic_labels[topic[0]], topic[1]) for topic in model[name]])

```


```{python}

sona_speeches_clean['president'].unique()

```

```{python}

# Run 11

# TODO: Add topic labels

# topic_labels_words = ['Circuits', 'Neuroscience', 'Numerical optimization']

# topic_labels_sents = ['Circuits', 'Neuroscience', 'Numerical optimization', 'Object recognition', \
#                'Math/general', 'Robotics', 'Character recognition', \
#                 'Reinforcement learning', 'Speech recognition', 'Bayesian modelling']

# Show the topics for each author
# show_author('Mandela', author_topic_model, topic_labels_words)
# show_author('deKlerk', author_topic_model_sentences)

```



</div> 

